/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  InvestigationHelper,
  InvestigationHelperInterface,
} from "../InvestigationHelper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "TokenEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "input",
        type: "string",
      },
    ],
    name: "echo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "emitEvent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576101a9908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081637b0cb83914610136575063f15da7291461003857600080fd5b34610132576020918260031936011261012f5760043567ffffffffffffffff9182821161012f573660238301121561012f57816004013583811161011b57845192601f199485603f81601f860116011685019085821090821117610107578652818452366024838301011161010357818394959392602489930183880137850101528351948592818452845191828186015281955b8387106100eb5750508394508582601f949501015201168101030190f35b868101820151898801890152958101958895506100cd565b8280fd5b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b82526041600452602482fd5b80fd5b5080fd5b83903461013257816003193601126101325760207f83da2df33b6342a13d208d719670068e5c5d7951aeb7a67eec1d116d94f6f43391338152a180f3fea2646970667358221220ec290e5daa989fe23170b3f18c564777951cabf54a18781d552a82f21006e03964736f6c63430008130033";

type InvestigationHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InvestigationHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InvestigationHelper__factory extends ContractFactory {
  constructor(...args: InvestigationHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InvestigationHelper> {
    return super.deploy(overrides || {}) as Promise<InvestigationHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InvestigationHelper {
    return super.attach(address) as InvestigationHelper;
  }
  override connect(signer: Signer): InvestigationHelper__factory {
    return super.connect(signer) as InvestigationHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InvestigationHelperInterface {
    return new utils.Interface(_abi) as InvestigationHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InvestigationHelper {
    return new Contract(address, _abi, signerOrProvider) as InvestigationHelper;
  }
}
