/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BalanceCalcInterface extends utils.Interface {
  functions: {
    "balanceOf()": FunctionFragment;
    "divTotalShares(uint256)": FunctionFragment;
    "init(uint256,uint256,uint256)": FunctionFragment;
    "mulResult()": FunctionFragment;
    "newBalanceOf()": FunctionFragment;
    "shares()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "divTotalShares"
      | "init"
      | "mulResult"
      | "newBalanceOf"
      | "shares"
      | "totalShares"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "divTotalShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "mulResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newBalanceOf",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shares", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "divTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "TokenEvent(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenEvent"): EventFragment;
}

export interface TokenEventEventObject {
  sender: string;
}
export type TokenEventEvent = TypedEvent<[string], TokenEventEventObject>;

export type TokenEventEventFilter = TypedEventFilter<TokenEventEvent>;

export interface BalanceCalc extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalanceCalcInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    divTotalShares(
      input: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      _shares: PromiseOrValue<BigNumberish>,
      _totalShares: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mulResult(overrides?: CallOverrides): Promise<[BigNumber]>;

    newBalanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    shares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  divTotalShares(
    input: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _shares: PromiseOrValue<BigNumberish>,
    _totalShares: PromiseOrValue<BigNumberish>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mulResult(overrides?: CallOverrides): Promise<BigNumber>;

  newBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  shares(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    divTotalShares(
      input: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _shares: PromiseOrValue<BigNumberish>,
      _totalShares: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mulResult(overrides?: CallOverrides): Promise<BigNumber>;

    newBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TokenEvent(address)"(sender?: null): TokenEventEventFilter;
    TokenEvent(sender?: null): TokenEventEventFilter;
  };

  estimateGas: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    divTotalShares(
      input: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _shares: PromiseOrValue<BigNumberish>,
      _totalShares: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mulResult(overrides?: CallOverrides): Promise<BigNumber>;

    newBalanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divTotalShares(
      input: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _shares: PromiseOrValue<BigNumberish>,
      _totalShares: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mulResult(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newBalanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
